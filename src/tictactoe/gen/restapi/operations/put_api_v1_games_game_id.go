// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// PutAPIV1GamesGameIDHandlerFunc turns a function with the right signature into a put API v1 games game ID handler
type PutAPIV1GamesGameIDHandlerFunc func(PutAPIV1GamesGameIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAPIV1GamesGameIDHandlerFunc) Handle(params PutAPIV1GamesGameIDParams) middleware.Responder {
	return fn(params)
}

// PutAPIV1GamesGameIDHandler interface for that can handle valid put API v1 games game ID params
type PutAPIV1GamesGameIDHandler interface {
	Handle(PutAPIV1GamesGameIDParams) middleware.Responder
}

// NewPutAPIV1GamesGameID creates a new http.Handler for the put API v1 games game ID operation
func NewPutAPIV1GamesGameID(ctx *middleware.Context, handler PutAPIV1GamesGameIDHandler) *PutAPIV1GamesGameID {
	return &PutAPIV1GamesGameID{Context: ctx, Handler: handler}
}

/*PutAPIV1GamesGameID swagger:route PUT /api/v1/games/{game_id} putApiV1GamesGameId

Post a new move to a game.

*/
type PutAPIV1GamesGameID struct {
	Context *middleware.Context
	Handler PutAPIV1GamesGameIDHandler
}

func (o *PutAPIV1GamesGameID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutAPIV1GamesGameIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutAPIV1GamesGameIDBadRequestBody put API v1 games game ID bad request body
// swagger:model PutAPIV1GamesGameIDBadRequestBody
type PutAPIV1GamesGameIDBadRequestBody struct {

	// Why the game failed to update
	Reason string `json:"reason,omitempty"`
}

// Validate validates this put API v1 games game ID bad request body
func (o *PutAPIV1GamesGameIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAPIV1GamesGameIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAPIV1GamesGameIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutAPIV1GamesGameIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
