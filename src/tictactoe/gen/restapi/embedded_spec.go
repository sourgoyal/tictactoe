// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Tic-tac-toe",
    "contact": {
      "url": "https://www.ssh.com"
    },
    "license": {
      "name": "All rights reserved SSH Communications Security Ltd"
    },
    "version": "1.0.1"
  },
  "paths": {
    "/api/v1/games": {
      "get": {
        "description": "Get all games.",
        "responses": {
          "200": {
            "description": "Successful response, returns an array of games, returns an empty array if no users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/game"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "description": "Start a new game.",
        "parameters": [
          {
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game successfully started",
            "schema": {
              "type": "object",
              "properties": {
                "location": {
                  "description": "URL of the started game",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "URL of the started game"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "description": "Why the game failed to start",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/games/{game_id}": {
      "get": {
        "description": "Get a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response, returns the game",
            "schema": {
              "$ref": "#/definitions/game"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Post a new move to a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          },
          {
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Move successfully registered, also provide backend's response move in response",
            "schema": {
              "$ref": "#/definitions/game"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "description": "Why the game failed to update",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Delete a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "game": {
      "description": "A game object",
      "type": "object",
      "required": [
        "board"
      ],
      "properties": {
        "board": {
          "description": "The board state",
          "type": "string",
          "example": "XO--X--OX"
        },
        "id": {
          "description": "The game's UUID, read-only, generated by the server. The client can not POST or PUT this.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "status": {
          "description": "The game status, read-only, the client can not POST or PUT this",
          "type": "string",
          "enum": [
            "RUNNING",
            "X_WON",
            "O_WON",
            "DRAW"
          ],
          "readOnly": true
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Tic-tac-toe",
    "contact": {
      "url": "https://www.ssh.com"
    },
    "license": {
      "name": "All rights reserved SSH Communications Security Ltd"
    },
    "version": "1.0.1"
  },
  "paths": {
    "/api/v1/games": {
      "get": {
        "description": "Get all games.",
        "responses": {
          "200": {
            "description": "Successful response, returns an array of games, returns an empty array if no users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/game"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "description": "Start a new game.",
        "parameters": [
          {
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game successfully started",
            "schema": {
              "type": "object",
              "properties": {
                "location": {
                  "description": "URL of the started game",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "URL of the started game"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "description": "Why the game failed to start",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/games/{game_id}": {
      "get": {
        "description": "Get a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response, returns the game",
            "schema": {
              "$ref": "#/definitions/game"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Post a new move to a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          },
          {
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Move successfully registered, also provide backend's response move in response",
            "schema": {
              "$ref": "#/definitions/game"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "description": "Why the game failed to update",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Delete a game.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Game id",
            "name": "game_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "game": {
      "description": "A game object",
      "type": "object",
      "required": [
        "board"
      ],
      "properties": {
        "board": {
          "description": "The board state",
          "type": "string",
          "example": "XO--X--OX"
        },
        "id": {
          "description": "The game's UUID, read-only, generated by the server. The client can not POST or PUT this.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "status": {
          "description": "The game status, read-only, the client can not POST or PUT this",
          "type": "string",
          "enum": [
            "RUNNING",
            "X_WON",
            "O_WON",
            "DRAW"
          ],
          "readOnly": true
        }
      }
    }
  }
}`))
}
