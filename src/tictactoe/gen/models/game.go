// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Game A game object
// swagger:model game
type Game struct {

	// The board state
	// Required: true
	Board *string `json:"board"`

	// The game's UUID, read-only, generated by the server. The client can not POST or PUT this.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The game status, read-only, the client can not POST or PUT this
	// Read Only: true
	// Enum: [RUNNING X_WON O_WON DRAW]
	Status string `json:"status,omitempty"`
}

// Validate validates this game
func (m *Game) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Game) validateBoard(formats strfmt.Registry) error {

	if err := validate.Required("board", "body", m.Board); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var gameTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RUNNING","X_WON","O_WON","DRAW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gameTypeStatusPropEnum = append(gameTypeStatusPropEnum, v)
	}
}

const (

	// GameStatusRUNNING captures enum value "RUNNING"
	GameStatusRUNNING string = "RUNNING"

	// GameStatusXWON captures enum value "X_WON"
	GameStatusXWON string = "X_WON"

	// GameStatusOWON captures enum value "O_WON"
	GameStatusOWON string = "O_WON"

	// GameStatusDRAW captures enum value "DRAW"
	GameStatusDRAW string = "DRAW"
)

// prop value enum
func (m *Game) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gameTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Game) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Game) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Game) UnmarshalBinary(b []byte) error {
	var res Game
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
