// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	"tictactoe/gen/models"
	"tictactoe/gen/restapi"
	"tictactoe/gen/restapi/operations"

	loads "github.com/go-openapi/loads"
	"github.com/go-openapi/runtime/middleware"
	flags "github.com/jessevdk/go-flags"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewTictactoeAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Tic-tac-toe"
	parser.LongDescription = swaggerSpec.Spec().Info.Description

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	api.GetAPIV1GamesHandler = operations.GetAPIV1GamesHandlerFunc(func(params operations.GetAPIV1GamesParams) middleware.Responder {
		var payload []*models.Game
		payload = make([]*models.Game, 1)
		board := "---------"
		pay := models.Game{Board: &board, Status: "RUNNING", ID: "11"}
		payload[0] = &pay

		return operations.NewGetAPIV1GamesOK().WithPayload(payload)
	})
	api.GetAPIV1GamesGameIDHandler = operations.GetAPIV1GamesGameIDHandlerFunc(func(params operations.GetAPIV1GamesGameIDParams) middleware.Responder {
		board := "---------"
		pay := models.Game{Board: &board, Status: "RUNNING", ID: "11"}
		return operations.NewGetAPIV1GamesGameIDOK().WithPayload(&pay)
	})

	api.DeleteAPIV1GamesGameIDHandler = operations.DeleteAPIV1GamesGameIDHandlerFunc(func(params operations.DeleteAPIV1GamesGameIDParams) middleware.Responder {
		return operations.NewDeleteAPIV1GamesGameIDOK()
	})

	api.PostAPIV1GamesHandler = operations.PostAPIV1GamesHandlerFunc(func(params operations.PostAPIV1GamesParams) middleware.Responder {
		return operations.NewPostAPIV1GamesCreated()
	})
	api.PutAPIV1GamesGameIDHandler = operations.PutAPIV1GamesGameIDHandlerFunc(func(params operations.PutAPIV1GamesGameIDParams) middleware.Responder {
		board := "---------"
		pay := models.Game{Board: &board, Status: "RUNNING", ID: "11"}
		return operations.NewPutAPIV1GamesGameIDOK().WithPayload(&pay)
	})

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
